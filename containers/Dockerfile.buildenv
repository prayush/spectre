# Distributed under the MIT License.
# See LICENSE.txt for details.

# If you change this file please push a new image to DockerHub so that the
# new image is used for testing. Docker must be run as root on your machine,
# so to build a new image run the following as root (e.g. sudo su):
#   cd $SPECTRE_HOME/containers
#   docker build  -t sxscollaboration/spectrebuildenv:latest \
#                 -f ./Dockerfile.buildenv .
# and then to push to DockerHub:
#   docker push sxscollaboration/spectrebuildenv
# If you do not have permission to push to DockerHub please coordinate with
# someone who does. Since changes to this image effect our testing
# infrastructure it is important all changes be carefully reviewed.

FROM ubuntu:17.04

ARG PARALLEL_MAKE_ARG=-j2

# Install required packages for SpECTRE
RUN apt-get update -y
RUN apt-get install -y gcc g++ gfortran git cmake
RUN apt-get install -y libopenblas-dev liblapack-dev libhdf5-dev libgsl0-dev
RUN apt-get install -y clang clang-format clang-tidy iwyu lcov cppcheck
RUN apt-get install -y libboost-all-dev

# Update is needed to get libc++ correctly
RUN apt-get update -y
RUN apt-get install -y libc++-dev libc++1 libc++abi-dev

# Install jemalloc
RUN apt-get update -y && apt-get install -y libjemalloc1 libjemalloc-dev

# Install ccache to cache compilations for reduced compile time
RUN apt-get install -y ccache

# Install Doxygen and coverxygen to check documentation coverage
RUN apt-get install -y doxygen python-pip
RUN pip install coverxygen

# wget and unzip are needed for retrieving SonarQUBE executables. Java is needed
# for running SonarQUBE's sonar-scanner, which does the code analysis
# Get the sonarqube source files and extract them. These are needed for static
# analysis using SonarQUBE.
RUN apt-get update -y && apt-get install -y wget unzip openjdk-8-jdk
RUN wget https://sonarsource.bintray.com/Distribution/sonar-scanner-cli/sonar-scanner-2.8.zip \
https://sonarqube.com/static/cpp/build-wrapper-linux-x86.zip \
&& mkdir /work && mkdir /work/sonarqube/ \
&& unzip sonar-scanner-2.8.zip -d /work/sonarqube/ \
&& unzip build-wrapper-linux-x86.zip -d /work/sonarqube/ \
&& echo "export PATH=\$PATH:/work/sonarqube/sonar-scanner-2.8/bin" >> root/.bashrc \
&& echo "export PATH=\$PATH:/work/sonarqube/build-wrapper-linux-x86" >> root/.bashrc

# Add ruby gems and install coveralls using gem
RUN apt-get update -y && apt-get install -y rubygems && gem install coveralls-lcov

# Enable bash-completion by installing it and then adding it to the .bashrc file
RUN apt-get update -y && apt-get install -y bash-completion
RUN printf "if [ -f /etc/bash_completion ] && ! shopt -oq posix; then\n\
    . /etc/bash_completion\nfi\n\n" >> /root/.bashrc

# Install LMod which is needed by Spack and set it to load at login
RUN apt-get update -y && apt-get install -y curl lmod
RUN printf '. /etc/profile.d/lmod.sh\n' >> /root/.bashrc
RUN . /etc/profile.d/lmod.sh

# Install Spack to get remaining dependencies
WORKDIR /work
RUN git clone https://github.com/LLNL/spack.git
WORKDIR /work/spack
# Since spack/develop is rather unstable, we check out a commit we
# know is stable. This should be updated periodically to update
# installed packages.
RUN git checkout c4db3d384ecd7b75ebf92a5ea0f3740c5137a8ab
WORKDIR /work

# Spack needs to be pointed to the system OpenSSL to work properly, we add this
# in the general configure script for Spack rather than a user-specific
# configure script. The below code is documented in the Spack manual.
RUN printf "\n  openssl:\n    paths:\n      openssl@1.0.2g: /usr\n\
    buildable: False\n" >> /work/spack/etc/spack/defaults/packages.yaml

# Add Spack to PATH and install required dependencies
RUN echo "export PATH=\$PATH:/work/spack/bin" >> /root/.bashrc
RUN echo '. /work/spack/share/spack/setup-env.sh' >> /root/.bashrc
RUN export PATH=$PATH:/work/spack/bin
RUN /work/spack/bin/spack install catch@1.9.1
RUN /work/spack/bin/spack install brigand@master
RUN /work/spack/bin/spack install blaze
RUN /work/spack/bin/spack install gsl%gcc
RUN /work/spack/bin/spack install libxsmm
# On 09/03/2017 CMake 3.9.0 failed to build with spack
RUN /work/spack/bin/spack install cmake@3.8.0
RUN /work/spack/bin/spack install yaml-cpp@develop ^cmake@3.8.0

# Download and build the Charm++ version used by SpECTRE
# We build both Clang and GCC versions of Charm++ so that all our tests can
# use the same build environment.
ARG CHARM_GIT_TAG=v6.8.0
RUN git clone https://charm.cs.illinois.edu/gerrit/charm
WORKDIR /work/charm
RUN git checkout ${CHARM_GIT_TAG}
RUN ./build charm++ multicore-linux64 gcc ${PARALLEL_MAKE_ARG} -g -O0
RUN ./build charm++ multicore-linux64 clang ${PARALLEL_MAKE_ARG} \
-g -O0

WORKDIR /work

# Load Spack dependencies at container load
RUN echo 'spack load catch' >> /root/.bashrc
RUN echo 'spack load brigand' >> /root/.bashrc
RUN echo 'spack load blaze' >> /root/.bashrc
RUN echo 'spack load gsl' >> /root/.bashrc
RUN echo 'spack load libxsmm' >> /root/.bashrc
RUN echo 'spack load yaml-cpp' >> /root/.bashrc
